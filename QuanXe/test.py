from collections import deque
import copy

# S·ªë qu√¢n h·∫≠u
N = 4
steps = 0  # Bi·∫øn to√†n c·ª•c ƒë·∫øm s·ªë b∆∞·ªõc

def constraint(i, x, j, y):
    """Hai qu√¢n h·∫≠u kh√¥ng ƒë∆∞·ª£c c√πng c·ªôt v√† kh√¥ng c√πng ƒë∆∞·ªùng ch√©o"""
    return x != y and abs(i - j) != abs(x - y)

def revise(domains, Xi, Xj):
    """Lo·∫°i b·ªè c√°c gi√° tr·ªã trong domain[Xi] kh√¥ng th·ªèa m√£n r√†ng bu·ªôc v·ªõi Xj"""
    revised = False
    for x in domains[Xi][:]:
        if not any(constraint(Xi, x, Xj, y) for y in domains[Xj]):
            domains[Xi].remove(x)
            revised = True
            print(f"‚ö†Ô∏è  AC3 lo·∫°i b·ªè {x} kh·ªèi domain[{Xi}] v√¨ kh√¥ng c√≤n gi√° tr·ªã h·ª£p l·ªá v·ªõi X{Xj}")
    return revised

def ac3(domains, variables):
    """Thu·∫≠t to√°n AC3: duy tr√¨ t√≠nh nh·∫•t qu√°n cung"""
    queue = deque((Xi, Xj) for Xi in variables for Xj in variables if Xi != Xj)
    while queue:
        Xi, Xj = queue.popleft()
        if revise(domains, Xi, Xj):
            if not domains[Xi]:
                return False
            for Xk in variables:
                if Xk not in (Xi, Xj):
                    queue.append((Xk, Xi))
    return True

def is_consistent(state, row, val):
    """Ki·ªÉm tra xem (row, val) c√≥ h·ª£p l·ªá v·ªõi c√°c h√†ng tr∆∞·ªõc kh√¥ng"""
    for r, c in enumerate(state):
        if not constraint(r, c, row, val):
            return False
    return True

def print_domains(domains):
    """In ra to√†n b·ªô domain hi·ªán t·∫°i"""
    print("   üìò Domain hi·ªán t·∫°i:")
    for k, v in domains.items():
        print(f"      H√†ng {k}: {v}")
    print("-" * 40)

def backtrack(state, domains, variables):
    global steps
    steps += 1

    print(f"\nüîπ B∆∞·ªõc {steps}: G√°n cho h√†ng {len(state)} | Tr·∫°ng th√°i hi·ªán t·∫°i: {state}")
    print_domains(domains)

    if len(state) == len(variables):
        return state  # ‚úÖ T·∫•t c·∫£ qu√¢n h·∫≠u ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t

    row = len(state)
    for val in domains[row]:
        if is_consistent(state, row, val):
            new_state = state + [val]
            new_domains = copy.deepcopy(domains)
            new_domains[row] = [val]

            print(f"üëâ Th·ª≠ ƒë·∫∑t qu√¢n h·∫≠u ·ªü (h√†ng={row}, c·ªôt={val})")
            if ac3(new_domains, variables):
                result = backtrack(new_state, new_domains, variables)
                if result:
                    return result
            else:
                print(f"‚õî AC3 ph√°t hi·ªán mi·ªÅn tr·ªëng sau khi g√°n h√†ng {row}={val}, quay lui...")

    print(f"üîô Quay lui t·ª´ tr·∫°ng th√°i {state}")
    return None

# ---------------------------
# Kh·ªüi t·∫°o v√† ch·∫°y
# ---------------------------
variables = list(range(N))
domains = {i: list(range(N)) for i in variables}

solution = backtrack([], domains, variables)
print("\n‚úÖ K·∫øt qu·∫£ cu·ªëi c√πng:")
print("Solution:", solution)
print("T·ªïng s·ªë b∆∞·ªõc:", steps)
